server:
  bind:
      host: 0.0.0.0  # listening address for incoming connections
      port: 5000  # listening port for incoming connections
  url: http://localhost:5000/  # url of server
  mimetype: application/json; charset=UTF-8  # default MIME type
  encoding: utf-8  # default server encoding
  language: en-US  # default server language
  gzip: true # default server config to gzip/compress responses to requests with gzip in the Accept-Encoding header
  cors: true  # boolean on whether server should support CORS
  pretty_print: True  # whether JSON responses should be pretty-printed
  limit: 100  # server limit on number of items to return

  templates: # optional configuration to specify a different set of templates for HTML pages. Recommend using absolute paths. Omit this to use the default provided templates
    path: C:/Daten/Git/pygeoapi-docker-backend/templates # path to templates folder containing the jinja2 template HTML files
    static: C:/Daten/Git/pygeoapi-docker-backend/static # path to static folder containing css, js, images and other static files referenced by the template

  map:  # leaflet map setup for HTML pages
      url: https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png
      attribution: '<a href="https://wikimediafoundation.org/wiki/Maps_Terms_of_Use">Wikimedia maps</a> | Map data &copy; <a href="https://openstreetmap.org/copyright">OpenStreetMap contributors</a>'

  manager:  # optional OGC API - Processes asynchronous job management
      name: TinyDB  # plugin name (see pygeoapi.plugin for supported process_manager's)
      connection: C:/Daten/Git/pygeoapi-docker-backend/tmp/pygeoapi-process-manager.db  # connection info to store jobs (e.g. filepath)
      output_dir: C:/Daten/Git/pygeoapi-docker-backend/tmp/  # temporary file area for storing job results (files)
  #ogc_schemas_location: C:/Daten/schemas/  # local copy of http://schemas.opengis.net
logging:
    level: DEBUG  # the logging level (see https://docs.python.org/3/library/logging.html#logging-levels)
    logfile: C:/Daten/Git/pygeoapi-docker-backend/tmp/pyGeoAPILOG.log  # the full file path to the logfile
metadata:
    identification:
        title: pygeoapi 52°North Test Instance  # the title of the service
        description: This is a test instance  # some descriptive text about the service
        keywords:  # list of keywords about the service
            - geospatial
            - data
            - api
            - 52°North
        keywords_type: theme  # keyword type as per the ISO 19115 MD_KeywordTypeCode codelist. Accepted values are discipline, temporal, place, theme, stratum
        terms_of_service: https://creativecommons.org/licenses/by/4.0/  # terms of service
        url: http://example.org  # informative URL about the service
    license:  # licensing details
        name: CC-BY 4.0 license
        url: https://creativecommons.org/licenses/by/4.0/
    provider:  # service provider details
        name: 52°North Spatial Information Research GmbH
        url: https://pygeoapi.io
    contact:  # service contact details
        name: Pilz, Alexander
        position: Student at WWU Münster and Student assistance at 52°North Spatial Information Research GmbH
        address: Musterstraße 9, Musterstadt
        city: Münster
        stateorprovince: NRW
        postalcode: '48147'
        country: Germany
        phone: +xx-xxx-xxx-xxxx
        fax: +xx-xxx-xxx-xxxx
        email: apilz@uni-muenster.de
        url: Contact URL
        hours: no details given
        instructions: During hours of service. Off on weekends.
        role: pointOfContact
resources:
    dockerTest:  # name of process
        type: process  # REQUIRED (collection, process, or stac-collection)
        processor:
            name: dockerTest  # Python path of process defition
    test:  # name of process
        type: process  # REQUIRED (collection, process, or stac-collection)
        processor:
            name: test  # Python path of process defition
    cia:  # name of process
        type: process  # REQUIRED (collection, process, or stac-collection)
        processor:
            name: cia  # Python path of process defition